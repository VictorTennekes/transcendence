frontend navigate: ''
CanActivate triggers: return (!!currentUser);

no user logged in -> fallback to LoginComponent
ngOnInit:
	authService.logout()
	this.returnUrl = '/'

on form submit:
	this.authService.login(this.form.controls.username.value)
	.pipe(first())
	.subscribe((data) => { this.router.navigate([this.returnUrl]); });


authService.logout:
	remove currentUser data from localStorage
	update currentUserSubject.next(null);

authService.login:
	POST ('api/auth/login')
	.pipe(
	map((user) =>
		check if there's a (user && user.accessToken):
			set localStorage
			update currentUserSubject.next(user)
	));

'api/auth/login':
	find user in db
	token = createToken(user)
	return: username, { token }


----


frontend has an Interceptor that acts on every request, appending an authorization header if the user is logged in
backend routes have an AuthGuard that checks to see if this header is present before allowing access to these routes